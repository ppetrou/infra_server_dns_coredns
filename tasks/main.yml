---
# tasks file for infra_server_dns_coredns

# Download CoreDNS Binary
- name: Download CoreDNS Precompiled Binary tarball
  get_url:
    url: "{{ infra_server_dns_coredns_download_url }}"
    dest: /tmp/{{ infra_server_dns_coredns_binary }}
    validate_certs: "{{ infra_server_dns_coredns_binary_download_validate_certs }}"

# Unzip CoreDNS tarball
- name: Unzip CoreDNS tarball
  unarchive:
    src: /tmp/{{ infra_server_dns_coredns_binary }}
    dest: /usr/bin
    owner: root
    group: root
    remote_src: yes

# Create /etc/coredns folder
- name: Create /etc/coredns folder
  file:
    path: /etc/coredns
    state: directory
    owner: root
    group: root

# Create Corefile
- name: Create Corefile
  vars:
    zones: "{{ infra_server_dns_coredns_zones | map(attribute='name') | list | unique }}"
    reverse_zones: "{{ infra_server_dns_coredns_zones | map(attribute='reverse_zone') | list | unique }}"
  template:
    src: Corefile.j2
    dest: /etc/coredns/Corefile
    owner: root
    group: root

# Create zone files
- name: Create zone files
  vars:
    name: "{{ item.name }}"
    reverse_zone: "{{ item.reverse_zone }}"
    a_records: "{{ item.a_records }}" 
  template: 
    src: db.zone.j2
    dest: /etc/coredns/db.{{ item.name }}
    owner: root
    group: root
  with_items: "{{ infra_server_dns_coredns_zones }}" 

# Create reverse zone files
- name: Create reverse zone files
  vars:
    name: "{{ item.name }}"
    reverse_zone: "{{ item.reverse_zone }}"
    a_records: "{{ item.a_records }}" 
  template: 
    src: db.reverse.j2
    dest: /etc/coredns/db.{{ item.name }}.rev
    owner: root
    group: root
  with_items: "{{ infra_server_dns_coredns_zones }}"

# Create the root reverse zone file
- name: Create the root reverse zone file
  vars:
    zones: "{{ infra_server_dns_coredns_zones }}"
  template: 
    src: db.reverse.root.j2
    dest: /etc/coredns/db.root.rev
    owner: root
    group: root

# Create empty log file if it does not exist. Systemd StandardOutput fails if the file does not exist!!
- name: Create empty log file if it does not exist. Systemd StandardOutput fails if the file does not exist!!
  file:
    path: "{{ infra_server_dns_coredns_logile }}"
    state: touch 

# Get the CoreDNS PID if it runs
- name: Get the CoreDNS PID if it runs
  shell: pgrep coredns
  register: reg_pid_coredns
  ignore_errors: True

# Kill CoreDNS if it runs. Not sure if it support config reload at this point.
- name: Kill CoreDNS if it running 
  shell: kill {{ reg_pid_coredns.stdout }}
  when: reg_pid_coredns.rc == 0

# Create the systemd unit
- name: Create the systemd unit
  template:
    src: systemd.j2
    dest: /usr/lib/systemd/system/corednsd.service
    owner: root
    group: root

# Daemon Reload
- name: Daemon Reload
  systemd:
    daemon_reload: yes

# Enable CoreDNS Service
- name: Enable CoreDNS Service
  systemd:
    name: corednsd
    enabled: true
    masked: no

# Start CoreDNS Service
- name: Start CoreDNS Service
  systemd:
    name: corednsd
    state: started

# Assert the DNS Entries - Forward Lookup
- name: Assert the DNS Entries - Forward Lookup
  vars:
    lookup_host: "{{ item.1.name}}.{{ item.0.name }}"
    lookup_ip: "{{ item.1.ip }}"
  assert:
    quiet: yes
    success_msg: "DNS Query for {{ lookup_host }} - OK"
    fail_msg: "DNS Query for {{ lookup_host }} - FAILED"
    that:
      - "{{ lookup('dig', lookup_host, infra_server_dns_coredns_ip_at_prefixed) == lookup_ip }}"
  loop: "{{ infra_server_dns_coredns_zones|subelements('a_records') }}"
  loop_control:
    label: "{{ lookup_host }} -> {{ lookup_ip }}"

# Assert the DNS Entries - Reverse Lookup
- name: Assert the DNS Entries - Reverse Lookup
  vars:
    lookup_host: "{{ item.1.name}}.{{ item.0.name }}."
    lookup_ip: "{{ item.1.ip }}/PTR"
  assert:
    quiet: yes
    success_msg: "DNS Query for {{ lookup_ip }} - OK"
    fail_msg: "DNS Query for {{ lookup_ip }} - FAILED"
    that:
      - "{{ lookup('dig', lookup_ip, infra_server_dns_coredns_ip_at_prefixed) == lookup_host }}"
  loop: "{{ infra_server_dns_coredns_zones|subelements('a_records') }}"
  loop_control:
    label: "{{ lookup_ip }} -> {{ lookup_host }}"

